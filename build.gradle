apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'scala'
apply plugin: 'forge'
apply plugin: 'rest'

buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "Sonatype Snapshots"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            name = "Sonatype Releases"
            url = "https://oss.sonatype.org/content/repositories/releases/"
        }
        maven {
        	name = "Gradle RESTful API"
        	url = 'http://dl.bintray.com/content/noamt/gradle-plugins'
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
        classpath 'org._10ne.gradle:rest-gradle-plugin:0.1.1'
    }
}

group = 'open-code-developers' //If you are not Open Code Developers, but are maintaining this project, please change this to your name.

archivesBaseName = 'BoatCraft'

version = getVersionName()

minecraft {
	version = '1.7.2-10.12.1.1060'
}

repositories {
    ivy {
        name = 'IndustrialCraft2 Jenkins'
        artifactPattern 'http://ic2api.player.to:8080/job/IC2_experimental/[revision]/artifact/build/libs/[module]-2.1.[revision]-experimental(-[classifier])(.[ext])'
    }
}

dependencies {
    compile 'cpw.mods:ironchest:1.7.2-6.0.4.713:deobf'
    compile 'IC2:industrialcraft-2:472:dev'
}

// this sets our output jar to have a 'tag' of 'universal' on it
// It also adds the minecraft version in a custom version name
// The result is files named <projectname>-<mcversion>-<version>-universal.jar
jar {
    classifier = 'universal'
    version = "${project.minecraft.version}-${project.version}"
}

// Add in a source jar for people, should they desire to download such a thing
task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'src'
    version = "${project.minecraft.version}-${project.version}"
}

// Add in an mcp named jar, for those who wish to run in a development environment (assuming mcp naming matches)
task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
    version = "${project.minecraft.version}-${project.version}"
}

// Add in a jar containing the ScalaDocs.
task docs(type: Jar) {
    from scaladoc.destinationDir
    classifier = 'docs'
    version = "${project.minecraft.version}-${project.version}"
}

// Configure an upload task. this is setup for uploading to files.minecraftforge.net. There are other examples around
uploadArchives {
    doLast {
        repositories {
            if (project.hasProperty("filesmaven")) {
                logger.info('Publishing to files server')

                mavenDeployer {
                    configuration = configurations.deployJars

                    repository(url: project.filesmaven.url) {
                        authentication(userName: project.filesmaven.username, privateKey: project.filesmaven.key)
                    }

                    // This is just the pom data for the maven repo
                    pom {
                        groupId = project.group
                        // Force the maven upload to use the <mcversion>-<version> syntax preferred at files
                        version = "${project.minecraft.version}-${project.version}"
                        artifactId = project.archivesBaseName
                        project {
                            name project.archivesBaseName
                            packaging 'jar'
                            description 'Rails had their turn, now out to the Minecraftian seas.'
                            url 'https://github.com/Open-Code-Developers/BoatCraft.git'

                            scm {
                                url 'https://github.com/Open-Code-Developers/BoatCraft'
                                connection 'scm:git:git://github.com/Open-Code-Developers/BoatCraft.git'
                                developerConnection 'scm:git:git@github.com:Open-Code-Developers/BoatCraft.git'
                            }

                            issueManagement {
                                system 'github'
                                url 'https://github.com/Open-Code-Developers/BoatCraft/issues'
                            }

                            licenses {
                                license {
                                    name 'The MIT License (MIT)'
                                    url 'https://raw.github.com/Open-Code-Developers/BoatCraft/master/LICENSE'
                                    distribution 'repo'
                                }
                            }

                            developers {
                                developer {
                                    id 'k2b6s9j'
                                    name 'Kepler Sticka-Jones'
                                    roles {
                                        role 'developer'
                                        role 'creator'
                                    }
                                }
                                developer {
                                    id 'viliml'
                                    name 'Vilim Lendvaj'
                                    roles { role 'developer' }
                                }
                            }
                        }
                    }
                }
            } else {
                logger.info('Publishing to repo folder')

                mavenDeployer {
                    pom.version = "${project.minecraft.version}-${project.version}"
                    repository(url: 'file://localhost/' + project.file('repo').getAbsolutePath())
                }
            }
        }
    }
}
    
def getVersionName()
{
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def getBranch()
{
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}


def getSHA()
{
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def jsonFile = new File(jar.destinationDir, "manifest.json")
task generateJson() { task ->
  def gitBranch = getBranch()
  def gitSHA = getSHA()

  // specify inputs and outputs so gradle can see if its upToDate
  task.inputs.with {
    property 'version', project.version // accounts for MCVersion, and all the other components
    property 'branch', gitBranch
    property 'commit', gitSHA
    property 'obf', jar.archiveName
    property 'deobf', deobfJar.archiveName
    property 'source', sourceJar.archiveName
    property 'scaladoc', docs.archiveName
    property 'project_name', project.archivesBaseName
  }
  task.outputs.file(jsonFile)

  // actual work here
  task.doLast {
    def builder = new groovy.json.JsonBuilder()
    def root = builder {
      'project_name' project.archivesBaseName
      'build_number' System.getenv().BUILD_NUMBER
      'minecraft_version' project.minecraft.version
      'mod_version' project.version
      'branch' gitBranch
      'commit' gitSHA
      'artifacts'([
        ['name' : 'universal', 'file' : jar.archiveName],
        ['name' : 'deobf', 'file' : deobfJar.archiveName ],
        ['name' : 'source', 'file' : sourceJar.archiveName ],
        ['name' : 'scaladoc', 'file' : docs.archiveName ]
      ])
    }

    jsonFile.write groovy.json.JsonOutput.prettyPrint(builder.toString())
  }
}

// Tell the artifact system about our extra jars
artifacts {
  archives sourceJar
  archives deobfJar
  archives docs
  archives(jsonFile) { builtBy generateJson }
}

task HeisenBugDev(type: org._10ne.gradle.rest.RestTask) {
	httpMethod = 'post'
    uri = 'heisenbugdev.com'
    username = System.getenv().HBD_EMAIL_PROD
    password = System.getenv().HBD_TOKEN_PROD
    requestBody = [jsonFile]
    contentType = groovyx.net.http.ContentType.JSON
}
